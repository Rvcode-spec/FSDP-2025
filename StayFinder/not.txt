server.post('/register', async (req,resp)=>{

    const {email,password}=req.body;

    const user = await User.findOne({email});
    if(user) return resp.status(401).send("already registered");

    try{

        const salt = parseInt(process.env.SALT_ROUNDS)||10;
        const hashPassword = await bcrypt.hash(password,salt);


        let user = new User({
            ...req.body,
            password:hashPassword,
        })

        let result = await user.save();
        resp.send(result);
        console.log("Register Successful");
        
    }
    catch(error){
        console.log(error);
        
        resp.status(500).send("Something is Wrong")
        

    }

})
------------------------------------------------------

login:-
---------
server.post('/login',async (req,resp)=>{

    const {email, password}= req.body;

    const user = await User.findOne({email});
    if(!user) return resp.status(401).send("Invalid Email");

    try{

        const auth = await bcrypt.compare(password, user.password);
        if(!auth) return resp.status(401).send("Password is not Match");


        const token = jwt.sign(
            {id:user._id},
            process.env.JWT_SCEURTY,
        )

        resp.send(token);
        console.log("Login Successful")
    }catch(error){
        console.log(error);
        resp.status(500).send("Server error")
        
    }

})
----------------------------------------------------

------Frontend -----------------------------------------------------



import { useState } from 'react';
import { format } from 'date-fns';
import { DateRange } from 'react-date-range';
import 'react-date-range/dist/styles.css';
import 'react-date-range/dist/theme/default.css';

export default function DateSelector({ checkIn, checkOut, setCheckIn, setCheckOut, isOpen, openCalendar }) {
  const [range, setRange] = useState([
    {
      startDate: checkIn ? new Date(checkIn) : new Date(),
      endDate: checkOut ? new Date(checkOut) : new Date(),
      key: 'selection',
    },
  ]);

  const handleSelect = (ranges) => {
    setRange([ranges.selection]);
    setCheckIn(ranges.selection.startDate.toISOString());
    setCheckOut(ranges.selection.endDate.toISOString());
  };

  return (
    <div className="relative">
      <div
        className=" px-3 py-2 rounded cursor-pointer text-sm bg-white"
        onClick={openCalendar}
      >
        üìÖ {checkIn ? format(new Date(checkIn), 'MMM dd') : 'Check In'} - {checkOut ? format(new Date(checkOut), 'MMM dd') : 'Check Out'}
      </div>

      {isOpen && (
        <div className="absolute z-50 top-12 shadow-lg bg-white rounded">
          <DateRange
            ranges={range}
            onChange={handleSelect}
            months={2}
            direction="horizontal"
            minDate={new Date()}
            moveRangeOnFirstSelection={false}
            editableDateInputs={true}
          />
        </div>
      )}
    </div>
  );
}
-------------------------------------------------------------
home.page 
----------------------------
import React from 'react'
const listings = [
  {
    img: 'https://source.unsplash.com/400x300/?maldives',
    title: 'MV, Maldives',
    location: '2,376 kilometers away',
    rating: '5.0 ‚òÖ',
    price: 'Rs. 83,896 night',
  },
  {
    img: 'https://source.unsplash.com/400x300/?greece',
    title: 'Kastraki, Greece',
    location: '6,345 kilometers away',
    rating: '3.9 ‚òÖ',
    price: 'Rs. 16,121 night',
  },
  {
    img: 'https://source.unsplash.com/400x300/?france',
    title: '√éle-de-Br√©hat, France',
    location: '2,376 kilometers away',
    rating: '3.2 ‚òÖ',
    price: 'Rs. 16,598 night',
  },
  {
    img: 'https://source.unsplash.com/400x300/?norway',
    title: 'Gl√•desk√•l, Norway',
    location: '2,376 kilometers away',
    rating: '4.2 ‚òÖ',
    price: 'Rs. 83,896 night',
  },
  

  {
    img: 'https://source.unsplash.com/400x300/?maldives',
    title: 'MV, Maldives',
    location: '2,376 kilometers away',
    rating: '5.0 ‚òÖ',
    price: 'Rs. 83,896 night',
  },
  {
    img: 'https://source.unsplash.com/400x300/?greece',
    title: 'Kastraki, Greece',
    location: '6,345 kilometers away',
    rating: '3.9 ‚òÖ',
    price: 'Rs. 16,121 night',
  },
  {
    img: 'https://source.unsplash.com/400x300/?france',
    title: '√éle-de-Br√©hat, France',
    location: '2,376 kilometers away',
    rating: '3.2 ‚òÖ',
    price: 'Rs. 16,598 night',
  },
  {
    img: 'https://source.unsplash.com/400x300/?norway',
    title: 'Gl√•desk√•l, Norway',
    location: '2,376 kilometers away',
    rating: '4.2 ‚òÖ',
    price: 'Rs. 83,896 night',
  },
  {
    img: 'https://source.unsplash.com/400x300/?maldives',
    title: 'MV, Maldives',
    location: '2,376 kilometers away',
    rating: '5.0 ‚òÖ',
    price: 'Rs. 83,896 night',
  },
  {
    img: 'https://source.unsplash.com/400x300/?greece',
    title: 'Kastraki, Greece',
    location: '6,345 kilometers away',
    rating: '3.9 ‚òÖ',
    price: 'Rs. 16,121 night',
  },
  {
    img: 'https://source.unsplash.com/400x300/?france',
    title: '√éle-de-Br√©hat, France',
    location: '2,376 kilometers away',
    rating: '3.2 ‚òÖ',
    price: 'Rs. 16,598 night',
  },
  {
    img: 'https://source.unsplash.com/400x300/?norway',
    title: 'Gl√•desk√•l, Norway',
    location: '2,376 kilometers away',
    rating: '4.2 ‚òÖ',
    price: 'Rs. 83,896 night',
  },
  {
    img: 'https://source.unsplash.com/400x300/?maldives',
    title: 'MV, Maldives',
    location: '2,376 kilometers away',
    rating: '5.0 ‚òÖ',
    price: 'Rs. 83,896 night',
  },
  {
    img: 'https://source.unsplash.com/400x300/?greece',
    title: 'Kastraki, Greece',
    location: '6,345 kilometers away',
    rating: '3.9 ‚òÖ',
    price: 'Rs. 16,121 night',
  },
  {
    img: 'https://source.unsplash.com/400x300/?france',
    title: '√éle-de-Br√©hat, France',
    location: '2,376 kilometers away',
    rating: '3.2 ‚òÖ',
    price: 'Rs. 16,598 night',
  },
  {
    img: 'https://source.unsplash.com/400x300/?norway',
    title: 'Gl√•desk√•l, Norway',
    location: '2,376 kilometers away',
    rating: '4.2 ‚òÖ',
    price: 'Rs. 83,896 night',
  },
  
];
export default function Home() {
  return (
   <div className="p-6 grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
      {listings.map((item, index) => (
        <div key={index} className="rounded-lg overflow-hidden shadow hover:shadow-md border">
          <div className="relative">
            <img src={item.img} alt={item.title} className="w-full h-56 object-cover" />
            <button className="absolute top-2 right-2 bg-white rounded-full p-1 shadow">
              ‚ù§Ô∏è
            </button>
          </div>
          <div className="p-3">
            <h3 className="font-semibold">{item.title}</h3>
            <p className="text-sm text-gray-500">{item.location}</p>
            <div className="flex items-center justify-between mt-1">
              <span className="text-sm font-medium">{item.price}</span>
              <span className="text-sm">{item.rating}</span>
            </div>
          </div>
        </div>
      ))}
    </div>
  )
}
----------------------------------
[
  
  {
    "name": "Sunrise Residency Delhi",
    "location": "Delhi NCR",
    "price": 3100,
    "images": ["https://images.unsplash.com/photo-1501117716987-c8e1ecb2101c?auto=format&fit=crop&w=800&q=80"]
  },
  {
    "name": "Royal Suites Delhi",
    "location": "Delhi NCR",
    "price": 3500,
    "images": ["https://images.unsplash.com/photo-1543807535-eceef57d3d3c?auto=format&fit=crop&w=800&q=80"]
  },
  
  {
    "name": "Grand Palace Mumbai",
    "location": "Mumbai",
    "price": 4100,
    "images": ["https://images.unsplash.com/photo-1613977257363-707ba9348225?auto=format&fit=crop&w=800&q=80"]
  },
  {
    "name": "Urban Stay Mumbai",
    "location": "Mumbai",
    "price": 3800,
    "images": ["https://images.unsplash.com/photo-1551776235-dde6d4829808?auto=format&fit=crop&w=800&q=80"]
  },
  {
    "name": "Sunrise Residency Mumbai",
    "location": "Mumbai",
    "price": 4200,
    "images": ["https://images.unsplash.com/photo-1590490350338-4d6b463d1f2e?auto=format&fit=crop&w=800&q=80"]
  },
  {
    "name": "Royal Suites Mumbai",
    "location": "Mumbai",
    "price": 4600,
    "images": ["https://images.unsplash.com/photo-1582719478175-2d84ae1286c1?auto=format&fit=crop&w=800&q=80"]
  },
  
  {
    "name": "Grand Palace Bangalore",
    "location": "Bangalore",
    "price": 3100,
    "images": ["https://images.unsplash.com/photo-1622124472789-dc89bfa6d79c?auto=format&fit=crop&w=800&q=80"]
  },
  {
    "name": "Urban Stay Bangalore",
    "location": "Bangalore",
    "price": 2900,
    "images": ["https://images.unsplash.com/photo-1611892440070-f51b32d3b1ba?auto=format&fit=crop&w=800&q=80"]
  },
  {
    "name": "Sunrise Residency Bangalore",
    "location": "Bangalore",
    "price": 3000,
    "images": ["https://images.unsplash.com/photo-1585559605156-0cf79c7e2b3e?auto=format&fit=crop&w=800&q=80"]
  },
  {
    "name": "Royal Suites Bangalore",
    "location": "Bangalore",
    "price": 3400,
    "images": ["https://images.unsplash.com/photo-1582719478122-d380a62a9589?auto=format&fit=crop&w=800&q=80"]
  },
  {
    "name": "Skyline Inn Bangalore",
    "location": "Bangalore",
    "price": 2800,
    "images": ["https://images.unsplash.com/photo-1604134967983-cddcaa4f1df9?auto=format&fit=crop&w=800&q=80"]
  },
  {
    "name": "Grand Palace Chennai",
    "location": "Chennai",
    "price": 3300,
    "images": ["https://images.unsplash.com/photo-1551907234-336a9d38757d?auto=format&fit=crop&w=800&q=80"]
  },
  {
    "name": "Urban Stay Chennai",
    "location": "Chennai",
    "price": 3100,
    "images": ["https://images.unsplash.com/photo-1582719247072-28b2e340fd7d?auto=format&fit=crop&w=800&q=80"]
  },
  {
    "name": "Sunrise Residency Chennai",
    "location": "Chennai",
    "price": 3000,
    "images": ["https://images.unsplash.com/photo-1615873968403-89e068e7db39?auto=format&fit=crop&w=800&q=80"]
  },
  {
    "name": "Royal Suites Chennai",
    "location": "Chennai",
    "price": 3500,
    "images": ["https://images.unsplash.com/photo-1616486430747-34efc82ed704?auto=format&fit=crop&w=800&q=80"]
  },
  {
    "name": "Skyline Inn Chennai",
    "location": "Chennai",
    "price": 2800,
    "images": ["https://images.unsplash.com/photo-1582719478175-2d84ae1286c1?auto=format&fit=crop&w=800&q=80"]
  },
  {
    "name": "Grand Palace Kolkata",
    "location": "Kolkata",
    "price": 3000,
    "images": ["https://images.unsplash.com/photo-1628744448151-4f86c9ae7b29?auto=format&fit=crop&w=800&q=80"]
  },
  {
    "name": "Urban Stay Kolkata",
    "location": "Kolkata",
    "price": 2700,
    "images": ["https://images.unsplash.com/photo-1600585154076-2c3b7c1a6a1b?auto=format&fit=crop&w=800&q=80"]
  },
  {
    "name": "Sunrise Residency Kolkata",
    "location": "Kolkata",
    "price": 3100,
    "images": ["https://images.unsplash.com/photo-1600585154454-9812f9971163?auto=format&fit=crop&w=800&q=80"]
  },
  {
    "name": "Royal Suites Kolkata",
    "location": "Kolkata",
    "price": 3300,
    "images": ["https://images.unsplash.com/photo-1572295440376-8915c7a538f8?auto=format&fit=crop&w=800&q=80"]
  },
  {
    "name": "Skyline Inn Kolkata",
    "location": "Kolkata",
    "price": 2800,
    "images": ["https://images.unsplash.com/photo-1618220179428-224dd6d82a55?auto=format&fit=crop&w=800&q=80"]
  }
]

----------------------------------------------------------------------------------------------------



// // Home Component with Location Filtering
// function Home() {
//   const { selectedLocation, searchFilters } = useLocation();
//   const [listings, setListings] = useState([]);
//   const [loading, setLoading] = useState(true);
//   const [error, setError] = useState(null);

//   // Mock data for demonstration
//   const mockListings = [
//     {
//       _id: '1',
//       name: 'Luxury Beach Resort',
//       location: 'Goa',
//       price: 3500,
//       images: ['https://images.unsplash.com/photo-1566073771259-6a8506099945?w=400&h=300&fit=crop']
//     },
//     {
//       _id: '2',
//       name: 'Mountain View Hotel',
//       location: 'Manali',
//       price: 2800,
//       images: ['https://images.unsplash.com/photo-1551882547-ff40c63fe5fa?w=400&h=300&fit=crop']
//     },
//     {
//       _id: '3',
//       name: 'City Center Apartment',
//       location: 'Mumbai',
//       price: 4200,
//       images: ['https://images.unsplash.com/photo-1560448204-e02f11c3d0e2?w=400&h=300&fit=crop']
//     },
//     {
//       _id: '4',
//       name: 'Heritage Palace',
//       location: 'Jaipur',
//       price: 5500,
//       images: ['https://images.unsplash.com/photo-1578683010236-d716f9a3f461?w=400&h=300&fit=crop']
//     },
//     {
//       _id: '5',
//       name: 'Modern Studio',
//       location: 'Bangalore',
//       price: 3200,
//       images: ['https://images.unsplash.com/photo-1522708323590-d24dbb6b0267?w=400&h=300&fit=crop']
//     },
//     {
//       _id: '6',
//       name: 'Backwater Resort',
//       location: 'Kerala',
//       price: 4800,
//       images: ['https://images.unsplash.com/photo-1571896349842-33c89424de2d?w=400&h=300&fit=crop']
//     }
//   ];

//   useEffect(() => {
//     const fetchListings = async () => {
//       try {
//         setLoading(true);
//         setError(null);
        
//         // Simulate API call
//         await new Promise(resolve => setTimeout(resolve, 1000));
        
//         // Filter listings based on selected location
//         let filteredListings = mockListings;
        
//         if (selectedLocation) {
//           filteredListings = mockListings.filter(listing => 
//             listing.location.toLowerCase().includes(selectedLocation.toLowerCase())
//           );
//         }
        
//         console.log('‚úÖ Filtered listings for location:', selectedLocation, filteredListings);
//         setListings(filteredListings);
        
//       } catch (err) {
//         console.error("‚ùå Error:", err);
//         setError(err.message);
//       } finally {
//         setLoading(false);
//       }
//     };

//     fetchListings();
//   }, [selectedLocation]); // Re-fetch when location changes

//   if (loading) {
//     return (
//       <div className="p-6">
//         <div className="text-center">
//           <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-[#FF385C] mx-auto mb-4"></div>
//           <p>Loading listings...</p>
//         </div>
//       </div>
//     );
//   }

//   if (error) {
//     return (
//       <div className="p-6">
//         <div className="text-red-500 text-center">
//           <h3 className="text-lg font-semibold">Error loading listings</h3>
//           <p>{error}</p>
//           <button 
//             onClick={() => window.location.reload()} 
//             className="mt-2 px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
//           >
//             Retry
//           </button>
//         </div>
//       </div>
//     );
//   }

//   return (
//     <div className="p-6">
//       <div className="flex justify-between items-center mb-6">
//         <h2 className="text-2xl font-semibold">
//           {selectedLocation ? `Stays in ${selectedLocation}` : 'Recommended Stays'}
//         </h2>
//         {selectedLocation && (
//           <div className="text-sm text-gray-600">
//             {listings.length} properties found
//           </div>
//         )}
//       </div>

//       <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
//         {listings.map((listing) => (
//           <div key={listing._id} className="border rounded-xl shadow hover:shadow-lg transition-shadow">
//             <img
//               src={listing.images?.[0] || "/placeholder-image.jpg"}
//               alt={listing.name || "Listing"}
//               className="w-full h-48 object-cover rounded-t-xl"
//               onError={(e) => {
//                 e.target.src = "/placeholder-image.jpg";
//               }}
//             />
            
//             <div className="p-4">
//               <h3 className="text-lg font-bold mb-1">{listing.name}</h3>
//               <p className="text-gray-500 mb-2 flex items-center gap-1">
//                 <MapPin className="h-3 w-3" />
//                 {listing.location}
//               </p>
//               <p className="text-pink-500 font-semibold">‚Çπ{listing.price}/night</p>
//             </div>
//           </div>
//         ))}
//       </div>
      
//       {listings.length === 0 && (
//         <div className="text-center text-gray-500 mt-12">
//           <div className="text-6xl mb-4">üè†</div>
//           <h3 className="text-lg font-semibold mb-2">
//             {selectedLocation ? `No listings found in ${selectedLocation}` : 'No listings available'}
//           </h3>
//           <p>
//             {selectedLocation ? 'Try searching for a different location' : 'Please check back later'}
//           </p>
//         </div>
//       )}
//     </div>
//   );
// }

// // Main App Component
// export default function App() {
//   return (
//     <LocationProvider>
//       <div className="min-h-screen bg-gray-50">
//         <Header />
//         <Home />
//       </div>
//     </LocationProvider>
//   );
// }

---------------------------------------------------------------------------

import { useEffect, useState } from "react";
import { useLocation, useNavigate } from "react-router-dom";
import { MapPin, Filter, SortAsc } from "lucide-react";

export default function Home() {
  const [listings, setListings] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [allListings, setAllListings] = useState([]); // Store all listings for filtering
  
  const location = useLocation();
  const navigate = useNavigate();
  const { selectedLocation, searchFilters } = location.state || {};

  useEffect(() => {
    const fetchListings = async () => {
      setLoading(true);
      setError(null);

      try {
        console.log("üîÑ Fetching listings from backend...");
        const response = await fetch("/api/listing");

        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }

        const data = await response.json();
        console.log("‚úÖ Backend listings received:", data);
        
        setAllListings(data); // Store all listings
        
        let filtered = data;

        // Filter by location if selected
        if (selectedLocation) {
          filtered = data.filter((listing) =>
            listing.location.toLowerCase().includes(selectedLocation.toLowerCase())
          );
          console.log(`‚úÖ Filtered listings for "${selectedLocation}":`, filtered);
        }

        // Additional filters from searchFilters if available
        if (searchFilters) {
          console.log("üîç Applying additional search filters:", searchFilters);
          
          // You can add more filtering logic here based on your needs:
          
          // Filter by check-in/check-out dates (if your backend supports it)
          // if (searchFilters.checkIn && searchFilters.checkOut) {
          //   // Add date filtering logic here
          // }
          
          // Filter by guest count (if your listings have capacity info)
          // if (searchFilters.adults && listing.maxGuests) {
          //   filtered = filtered.filter(listing => 
          //     listing.maxGuests >= searchFilters.adults + searchFilters.children
          //   );
          // }
          
          // Filter by price range, amenities, etc.
        }

        setListings(filtered);
        console.log("üìã Final filtered listings:", filtered);

      } catch (err) {
        console.error("‚ùå Fetch error:", err);
        setError(err.message || "Failed to load listings");
      } finally {
        setLoading(false);
      }
    };

    fetchListings();
  }, [selectedLocation, searchFilters]);

  // Clear location filter and show all listings
  const clearLocationFilter = () => {
    setListings(allListings);
    // Update URL to remove state
    navigate('/', { replace: true });
  };

  // Clear all filters
  const clearAllFilters = () => {
    setListings(allListings);
    navigate('/', { replace: true });
  };

  // Handle listing click (navigate to detail page)
  const handleListingClick = (listingId) => {
    navigate(`/listing/${listingId}`);
  };

  // Loading UI
  if (loading) {
    return (
      <div className="p-6 text-center">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-[#FF385C] mx-auto mb-4" />
        <p className="text-gray-600">Loading listings from backend...</p>
      </div>
    );
  }

  // Error UI
  if (error) {
    return (
      <div className="p-6">
        <div className="text-red-500 text-center">
          <h3 className="text-lg font-semibold">Error loading listings</h3>
          <p className="mb-4">{error}</p>
          <div className="space-x-2">
            <button
              onClick={() => window.location.reload()}
              className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 transition-colors"
            >
              Retry
            </button>
            <button
              onClick={() => navigate('/')}
              className="px-4 py-2 bg-gray-500 text-white rounded hover:bg-gray-600 transition-colors"
            >
              Go Home
            </button>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="p-6">
      {/* Header with filters */}
      <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-6">
        <div>
          <h2 className="text-2xl font-semibold mb-2">
            {selectedLocation ? `Stays in ${selectedLocation}` : "Recommended Stays"}
          </h2>
          
          <div className="flex items-center gap-4 text-sm text-gray-600">
            <span>{listings.length} properties found</span>
            {selectedLocation && (
              <button
                onClick={clearLocationFilter}
                className="text-blue-600 hover:underline"
              >
                Clear location filter
              </button>
            )}
            {(selectedLocation || searchFilters) && (
              <button
                onClick={clearAllFilters}
                className="text-red-600 hover:underline"
              >
                Clear all filters
              </button>
            )}
          </div>
        </div>

        {/* Filter and Sort buttons */}
        <div className="flex gap-2 mt-4 sm:mt-0">
          <button className="flex items-center gap-2 px-3 py-2 border rounded-lg hover:bg-gray-50 transition-colors">
            <Filter className="h-4 w-4" />
            Filter
          </button>
          <button className="flex items-center gap-2 px-3 py-2 border rounded-lg hover:bg-gray-50 transition-colors">
            <SortAsc className="h-4 w-4" />
            Sort
          </button>
        </div>
      </div>

      {/* Active filters display */}
      {(selectedLocation || searchFilters?.checkIn || searchFilters?.adults > 1) && (
        <div className="flex flex-wrap gap-2 mb-6">
          {selectedLocation && (
            <div className="flex items-center gap-2 bg-blue-100 text-blue-800 px-3 py-1 rounded-full text-sm">
              <MapPin className="h-3 w-3" />
              {selectedLocation}
              <button
                onClick={clearLocationFilter}
                className="text-blue-600 hover:text-blue-800 ml-1 font-bold"
              >
                √ó
              </button>
            </div>
          )}
          
          {searchFilters?.checkIn && searchFilters?.checkOut && (
            <div className="bg-green-100 text-green-800 px-3 py-1 rounded-full text-sm">
              üìÖ {new Date(searchFilters.checkIn).toLocaleDateString()} - {new Date(searchFilters.checkOut).toLocaleDateString()}
            </div>
          )}
          
          {searchFilters?.adults > 1 && (
            <div className="bg-purple-100 text-purple-800 px-3 py-1 rounded-full text-sm">
              üë• {searchFilters.adults} Adults
              {searchFilters.children > 0 && `, ${searchFilters.children} Children`}
            </div>
          )}
          
          {searchFilters?.rooms > 1 && (
            <div className="bg-orange-100 text-orange-800 px-3 py-1 rounded-full text-sm">
              üè† {searchFilters.rooms} Rooms
            </div>
          )}
        </div>
      )}

      {/* Listings Grid */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
        {listings.map((listing) => (
          <div 
            key={listing._id} 
            onClick={() => handleListingClick(listing._id)}
            className="border rounded-xl shadow hover:shadow-lg transition-all duration-300 cursor-pointer transform hover:scale-105"
          >
            <div className="relative">
              <img
                src={listing.images?.[0] || "/placeholder-image.jpg"}
                alt={listing.name || "Listing"}
                className="w-full h-48 object-cover rounded-t-xl"
                onError={(e) => {
                  e.target.src = "/placeholder-image.jpg";
                }}
              />
              {listing.images?.length > 1 && (
                <div className="absolute top-2 right-2 bg-black bg-opacity-50 text-white text-xs px-2 py-1 rounded">
                  +{listing.images.length - 1} photos
                </div>
              )}
            </div>

            <div className="p-4">
              <h3 className="text-lg font-bold mb-1 line-clamp-1">{listing.name}</h3>
              <p className="text-gray-500 flex items-center gap-1 mb-2">
                <MapPin className="h-4 w-4 flex-shrink-0" />
                <span className="line-clamp-1">{listing.location}</span>
              </p>
              
              {listing.description && (
                <p className="text-gray-600 text-sm mb-2 line-clamp-2">
                  {listing.description}
                </p>
              )}
              
              <div className="flex justify-between items-center">
                <p className="text-pink-500 font-semibold text-lg">
                  ‚Çπ{typeof listing.price === 'number' ? listing.price.toLocaleString() : listing.price}/night
                </p>
                {listing.rating && (
                  <div className="flex items-center gap-1 text-sm text-gray-600">
                    <span className="text-yellow-400">‚≠ê</span>
                    <span>{listing.rating}</span>
                    {listing.reviewCount && (
                      <span className="text-gray-400">({listing.reviewCount})</span>
                    )}
                  </div>
                )}
              </div>
              
              {listing.amenities && listing.amenities.length > 0 && (
                <div className="mt-2 flex flex-wrap gap-1">
                  {listing.amenities.slice(0, 3).map((amenity, index) => (
                    <span key={index} className="text-xs bg-gray-100 text-gray-600 px-2 py-1 rounded">
                      {amenity}
                    </span>
                  ))}
                  {listing.amenities.length > 3 && (
                    <span className="text-xs text-gray-500">
                      +{listing.amenities.length - 3} more
                    </span>
                  )}
                </div>
              )}
            </div>
          </div>
        ))}
      </div>

      {/* No Results */}
      {listings.length === 0 && !loading && (
        <div className="text-center text-gray-500 mt-12">
          <div className="text-6xl mb-4">üè†</div>
          <h3 className="text-lg font-semibold mb-2">
            {selectedLocation
              ? `No listings found in ${selectedLocation}`
              : "No listings available"}
          </h3>
          <p className="mb-4 text-gray-400">
            {selectedLocation
              ? "Try searching for a different location or clear your filters"
              : "Please check back later or try refreshing the page"}
          </p>
          <div className="space-x-2">
            {selectedLocation && (
              <button
                onClick={clearLocationFilter}
                className="bg-[#FF385C] text-white px-6 py-2 rounded-lg hover:bg-[#E31E3A] transition-colors"
              >
                View All Properties
              </button>
            )}
            <button
              onClick={() => window.location.reload()}
              className="bg-gray-500 text-white px-6 py-2 rounded-lg hover:bg-gray-600 transition-colors"
            >
              Refresh Page
            </button>
          </div>
        </div>
      )}

      {/* Debug Info (remove in production) */}

        <div className="mt-8 p-4 bg-gray-100 rounded-lg text-sm">
          <h4 className="font-semibold mb-2">Debug Info:</h4>
          <p><strong>Selected Location:</strong> {selectedLocation || 'None'}</p>
          <p><strong>Total Listings:</strong> {allListings.length}</p>
          <p><strong>Filtered Listings:</strong> {listings.length}</p>
          <p><strong>Search Filters:</strong> {JSON.stringify(searchFilters)}</p>
        </div>
      
    </div>
  );
}
----------------------------------------------------------------------
import { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { Search, MapPin } from 'lucide-react';
import logo from '../../assets/logo.png';
import Login from '../_Auth/login';
import Register from '../_Auth/Register';
import DateSelector from '../_common/DateSelector';
import GuestSelector from '../_common/GuestSelector';

// Location Dropdown Component
function LocationDropdown({ location, onSelect }) {
  const popularLocations = [
    'Mumbai', 'Delhi', 'Goa', 'Bangalore', 'Jaipur', 
    'Kerala', 'Manali', 'Udaipur', 'Shimla', 'Rishikesh'
  ];

  const filteredLocations = location 
    ? popularLocations.filter(loc => 
        loc.toLowerCase().includes(location.toLowerCase())
      ) 
    : popularLocations;

  return (
    <div className="absolute top-12 left-0 bg-white shadow-lg border rounded-lg w-64 p-3 text-sm z-50 max-h-60 overflow-y-auto">
      <div className="text-xs text-gray-500 mb-2 font-medium">
        {location ? 'Search Results' : 'Popular Destinations'}
      </div>
      {filteredLocations.length > 0 ? (
        filteredLocations.map((loc, index) => (
          <div
            key={index}
            onClick={() => onSelect(loc)}
            className="flex items-center gap-2 p-2 hover:bg-gray-50 rounded cursor-pointer"
          >
            <MapPin className="h-3 w-3 text-gray-400" />
            <span className="text-gray-700">{loc}</span>
          </div>
        ))
      ) : (
        <div className="text-gray-500 text-center py-4">
          Koi location nahi mili
        </div>
      )}
    </div>
  );
}

export default function Header() {
  const navigate = useNavigate();
  const [formType, setFormType] = useState('');
  const [location, setLocation] = useState('');
  const [checkIn, setCheckIn] = useState(null);
  const [checkOut, setCheckOut] = useState(null);
  const [guests, setGuests] = useState({ adults: 1, children: 0, rooms: 1 });

  // Control which section is active: 'location' | 'calendar' | 'guests' | null
  const [activeInput, setActiveInput] = useState(null);

  // Option 1: Navigate to separate pages
  const handleLoginClick = () => {
    navigate('/login');
  };

  const handleRegisterClick = () => {
    navigate('/register');
  };

  const handleSearch = () => {
    const query = {
      location,
      checkIn,
      checkOut,
      ...guests,
    };
 
    
  };

  return (
    <>
      <div className="w-full flex flex-wrap items-center justify-between px-4 py-2 bg-white shadow">
        {/* Logo */}
        <div className="w-[180px] h-[50px] text-[#FF385C] flex items-center">
          <img src={logo} alt="logo" className="object-contain" />
        </div>

        {/* Search Bar */}
        <div className="hidden lg:flex items-center shadow-md rounded-full px-4 py-2 border w-full max-w-[700px] mx-2 h-[48px] bg-white relative">
          {/* Location */}
          <div
            className="relative px-3 cursor-pointer"
            onClick={() => setActiveInput(activeInput === 'location' ? null : 'location')}
          >
            <input
              type="text"
              placeholder="Kahan jana hai?"
              value={location}
              onChange={(e) => setLocation(e.target.value)}
              className="w-[140px] text-sm font-medium placeholder-gray-600 outline-none cursor-pointer"
            />
            {activeInput === 'location' && (
              <LocationDropdown 
                location={location}
                onSelect={(loc) => {
                  setLocation(loc);
                  setActiveInput(null);
                }}
              />
            )}
          </div>

          {/* Calendar */}
          <div className="px-4 border-x">
            <DateSelector
              checkIn={checkIn}
              checkOut={checkOut}
              isOpen={activeInput === 'calendar'}
              setIsOpen={(val) => setActiveInput(val ? 'calendar' : null)}
              onChange={({ checkIn, checkOut }) => {
                setCheckIn(checkIn);
                setCheckOut(checkOut);
              }}
            />
          </div>

          {/* Guests */}
          <div>
            <GuestSelector
              guests={guests}
              setGuests={setGuests}
              isOpen={activeInput === 'guests'}
              openGuests={() => setActiveInput('guests')}
            />
          </div>

          {/* Search Button */}
          <div
            onClick={handleSearch}
            className="bg-[#FF385C] p-2 rounded-full ml-2 cursor-pointer hover:bg-[#E31E3A] transition-colors"
          >
            <Search className="text-white h-4 w-4" />
          </div>
        </div>

        {/* Auth Buttons */}
        <div className="flex items-center gap-2 mt-2 lg:mt-0">
          <button
            onClick={handleLoginClick}
            className="capitalize bg-purple-700 py-2 px-4 rounded-2xl text-white font-bold hover:bg-purple-800 text-sm transition-colors"
          >
            login
          </button>
          <button
            onClick={handleRegisterClick}
            className="capitalize bg-purple-700 py-2 px-4 rounded-2xl text-white font-bold hover:bg-purple-800 text-sm transition-colors"
          >
            register
          </button>
        </div>

        {/* Mobile Search */}
        <div className="w-full mt-3 lg:hidden">
          <input
            type="text"
            placeholder="Search destination..."
            value={location}
            onChange={(e) => setLocation(e.target.value)}
            className="w-full border rounded-full px-4 py-2 text-sm shadow focus:outline-none focus:ring-2 focus:ring-purple-500"
          />
        </div>
      </div>

      {/* Login/Register Form - Only renders if using inline approach */}
      {formType && (
        <div className="px-4">
          {formType === 'login' && <Login onClose={() => setFormType('')} />}
          {formType === 'register' && <Register onClose={() => setFormType('')} />}
        </div>
      )}
    </>
  );
}